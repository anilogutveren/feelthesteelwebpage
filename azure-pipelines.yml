# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker


trigger:
- master

resources:
- repo: self

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'a520391d-fc9f-4b8d-98d1-6346bf7f8631'
  imageRepository: 'ftsbackendapp'
  containerRegistry: 'mybandscontainerregistry.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  dockerFileContext: '**'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'mybandscontainerregistry7ea3-auth'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: MavenBuild
  displayName: Maven Build stage
  jobs:
    - job: BuildMaven
      displayName: BuildMaven
      steps:
        - task: Cache@2
          displayName: 'Cache Maven local repo'
          inputs:
            key: 'maven | "$(Agent.OS)" | **/pom.xml'
            restoreKeys: |
              maven | "$(Agent.OS)"
              maven
            path: $(MAVEN_CACHE_FOLDER)
        - task: Maven@4
          inputs:
            mavenPomFile: 'pom.xml'
            goals: 'package'
            options: '--batch-mode -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER) -DskipTests'
            publishJUnitResults: true
            testResultsFiles: '**/surefire-reports/TEST-*.xml'
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: '1.17'
            mavenVersionOption: 'Default'
            mavenAuthenticateFeed: true
            effectivePomSkip: false
            sonarQubeRunAnalysis: false 
        - task: Bash@3
          inputs:
            targetType: 'inline'
            script: |
              ls -la
              ls -la target    
        - task: Docker@2
          displayName: Build and push an image to container registry
          inputs:
            command: buildAndPush
            repository: $(imageRepository)
            dockerfile: $(dockerfilePath)
            buildContext: $(dockerFileContext)
            containerRegistry: $(dockerRegistryServiceConnection)
            tags: |
              $(tag)
        - upload: manifests
          artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'anilogutverenfeelthesteelwebpage.nsfeelthesteel'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

